<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Users\yvesr\Documents\GitHub\AggregateSource\build\output\net45\AggregateSource.Tests.dll" total="752" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2013-07-26" time="19:09:29">
  <environment nunit-version="2.6.2.12296" clr-version="2.0.50727.5472" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="C:\Users\yvesr\Documents\GitHub\AggregateSource\build" machine-name="YVES-PC" user="yvesr" user-domain="ULTRAGENDA" />
  <culture-info current-culture="nl-BE" current-uiculture="en-US" />
  <test-suite type="Test Project" name="" executed="True" result="Success" success="True" time="43.124" asserts="0">
    <results>
      <test-suite type="Assembly" name="C:\Users\yvesr\Documents\GitHub\AggregateSource\build\output\net45\AggregateSource.Tests.dll" executed="True" result="Success" success="True" time="0.899" asserts="0">
        <results>
          <test-suite type="Namespace" name="AggregateSource" executed="True" result="Success" success="True" time="0.892" asserts="0">
            <results>
              <test-suite type="TestFixture" name="AggregateNotFoundExceptionTests" executed="True" result="Success" success="True" time="0.087" asserts="0">
                <results>
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.CanBeSerialized" executed="True" result="Success" success="True" time="0.014" asserts="4" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.IsAnAggregateSourceException" executed="True" result="Success" success="True" time="0.052" asserts="1" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheConstructorWithMessageAggregateIdentifierCannotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheConstructorWithMessageAggregateTypeCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheConstructorWithMessageAndInnerExceptionAggregateIdentifierCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheConstructorWithMessageAndInnerExceptionAggregateTypeCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheConstructorWithMessageAndInnerExceptionReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheConstructorWithMessageReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheDefaultContstructorAggregateIdentifierCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheDefaultContstructorAggregateTypeCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="AggregateSource.AggregateNotFoundExceptionTests.UsingTheDefaultContstructorReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="AggregateRootEntityTests" executed="True" result="Success" success="True" time="0.069" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithAnyInstance.ApplyCanBeInterceptedAfterApplication" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithAnyInstance.ApplyCanBeInterceptedBeforeApplication" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithAnyInstance.ApplyEventCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithAnyInstance.InitializeEventsCanNotBeNull" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithAnyInstance.IsObservableAggregateRootEntity" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithAnyInstance.RegisterHandlerCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithAnyInstance.RegisterHandlerCanOnlyBeCalledOncePerEventType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithChangedInstance" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedInstance.InitializeThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithChangedThenClearedInstance" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedThenClearedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedThenClearedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedThenClearedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithChangedThenClearedInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInitializedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInitializedThenChangedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedInstance.InitializeThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInitializedThenChangedThenClearedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithHandlers" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInstanceWithHandlers.ApplyEventCallsEventHandler" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInstanceWithHandlers.InitializeCallsHandlerForEachEvent" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithoutHandlers" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInstanceWithoutHandlers.ApplyEventDoesNotThrow" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithInstanceWithoutHandlers.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithPristineInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithPristineInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithPristineInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithPristineInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.AggregateRootEntityTests.WithPristineInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="AggregateSourceExceptionTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                <results>
                  <test-case name="AggregateSource.AggregateSourceExceptionTests.CanBeSerialized" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="AggregateSource.AggregateSourceExceptionTests.IsAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="AggregateSource.AggregateSourceExceptionTests.UsingTheConstructorWithMessageAndInnerExceptionReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="AggregateSource.AggregateSourceExceptionTests.UsingTheConstructorWithMessageReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="AggregateSource.AggregateSourceExceptionTests.UsingTheDefaultConstructorReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="AggregateTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
                <results>
                  <test-case name="AggregateSource.AggregateTests.IdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="AggregateSource.AggregateTests.RootCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-suite type="ParameterizedTest" name="UsingDefaultConstructorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.018" asserts="0">
                    <results>
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;00000000-0000-0000-0000-000000000000&quot;,int.MinValue)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;00000000-0000-0000-0000-000000000000&quot;,-1)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;00000000-0000-0000-0000-000000000000&quot;,0)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;00000000-0000-0000-0000-000000000000&quot;,1)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;00000000-0000-0000-0000-000000000000&quot;,int.MaxValue)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;90d6bae5-f3ab-4c2e-a315-d27c58303dcd&quot;,int.MinValue)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;90d6bae5-f3ab-4c2e-a315-d27c58303dcd&quot;,-1)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;90d6bae5-f3ab-4c2e-a315-d27c58303dcd&quot;,0)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;90d6bae5-f3ab-4c2e-a315-d27c58303dcd&quot;,1)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;90d6bae5-f3ab-4c2e-a315-d27c58303dcd&quot;,int.MaxValue)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/00000000-0000-0000-0000-000000000000&quot;,int.MinValue)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/00000000-0000-0000-0000-000000000000&quot;,-1)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/00000000-0000-0000-0000-000000000000&quot;,0)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/00000000-0000-0000-0000-000000000000&quot;,1)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/00000000-0000-0000-0000-000000000000&quot;,int.MaxValue)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/3c377432-143f-4e4e-be4b-72bd0f50f724&quot;,int.MinValue)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/3c377432-143f-4e4e-be4b-72bd0f50f724&quot;,-1)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/3c377432-143f-4e4e-be4b-72bd0f50f724&quot;,0)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/3c377432-143f-4e4e-be4b-72bd0f50f724&quot;,1)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="AggregateSource.AggregateTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(&quot;Aggregate/3c377432-143f-4e4e-be4b-72bd0f50f724&quot;,int.MaxValue)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ConcurrentUnitOfWorkTests" executed="True" result="Success" success="True" time="0.028" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithAnyInstance.AttachNullThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithAnyInstance.TryGetIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithAttachedAggregate" executed="True" result="Success" success="True" time="0.012" asserts="0">
                    <results>
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedAggregate.AttachDoesNotThrowWithOtherAggregate" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedAggregate.AttachThrowsWithSameAggregate" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedAggregate.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedAggregate.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedAggregate.TryGetReturnsFalseAndNullAsAggregateForUnknownId" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedAggregate.TryGetReturnsTrueAndAggregateForKnownId" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithAttachedChangedAggregates" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedChangedAggregates.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithInstanceWithAttachedChangedAggregates.HasChangesReturnsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithPristineInstance" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithPristineInstance.AttachAggregateDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithPristineInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithPristineInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.ConcurrentUnitOfWorkTests.WithPristineInstance.TryGetReturnsFalseAndNullAsAggregate" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="EntityTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="AggregateSource.EntityTests.WithAnyInstance.ApplierCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.EntityTests.WithAnyInstance.ApplyEventCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EntityTests.WithAnyInstance.PlayEventCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EntityTests.WithAnyInstance.RegisterHandlerCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.EntityTests.WithAnyInstance.RegisterHandlerCanOnlyBeCalledOncePerEventType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithHandlers" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="AggregateSource.EntityTests.WithInstanceWithHandlers.ApplyEventCallsApplier" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.EntityTests.WithInstanceWithHandlers.PlayCallsHandlerOfEvent" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithoutHandlers" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="AggregateSource.EntityTests.WithInstanceWithoutHandlers.ApplyEventDoesNotThrow" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.EntityTests.WithInstanceWithoutHandlers.PlayDoesNotThrow" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="EventRecorderTests" executed="True" result="Success" success="True" time="0.020" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="AggregateSource.EventRecorderTests.WithAnyInstance.IsEnumerable" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithAnyInstance.RecordEventCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithEmptyInstance" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="AggregateSource.EventRecorderTests.WithEmptyInstance.ContainsExpectedEventsAfterRecord" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithEmptyInstance.IsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithEmptyInstance.IsStillEmptyAfterReset" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithEmptyInstance.RecordDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithEmptyInstance.ResetDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithMutatedInstance" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="AggregateSource.EventRecorderTests.WithMutatedInstance.ContainsExpectedEvents" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithMutatedInstance.ContainsExpectedEventsAfterRecord" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithMutatedInstance.IsEmptyAfterReset" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithMutatedInstance.IsNotEmpty" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithMutatedInstance.RecordDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.EventRecorderTests.WithMutatedInstance.ResetDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="OptionalTests" executed="True" result="Success" success="True" time="0.091" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <results>
                      <test-case name="AggregateSource.OptionalTests.WithAnyInstance.IsEquatable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithEmptyReferenceTypeInstance" executed="True" result="Success" success="True" time="0.020" asserts="0">
                    <results>
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.DoesNotObjectEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.DoesObjectEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.HasValueReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.ObjectEnumerationIsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstanceHaveTheSameHashCodeIfTheyBothDoNotHaveAValueAndAreOfTheSameValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreEqualIfTheyBothDoNotHaveAValueAndAreOfTheSameValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreNotEqualIfTheOtherHasAValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreNotEqualIfTheOtherHasAValueAndIsOfTheSameValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreNotEqualIfTheOtherHasNoValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasAValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasAValueAndIsOfTheSameValueType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasNoValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.TypedEnumerationIsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyReferenceTypeInstance.WithEmptyInstanceFixture`1.ValueThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithEmptyValueTypeInstance" executed="True" result="Success" success="True" time="0.017" asserts="0">
                    <results>
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.DoesNotObjectEqualNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.DoesObjectEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.HasValueReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.ObjectEnumerationIsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstanceHaveTheSameHashCodeIfTheyBothDoNotHaveAValueAndAreOfTheSameValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreEqualIfTheyBothDoNotHaveAValueAndAreOfTheSameValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreNotEqualIfTheOtherHasAValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreNotEqualIfTheOtherHasAValueAndIsOfTheSameValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesAreNotEqualIfTheOtherHasNoValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasAValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasAValueAndIsOfTheSameValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasNoValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.TypedEnumerationIsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithEmptyValueTypeInstance.WithEmptyInstanceFixture`1.ValueThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithFilledReferenceTypeInstance" executed="True" result="Success" success="True" time="0.021" asserts="0">
                    <results>
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.DoesNotObjectEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.DoesObjectEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.HasValueReturnsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.ObjectEnumerationReturnsInitializationValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesAreEqualIfTheyBothHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasDifferentValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasDifferentValueAndIsOfDifferentType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasNoValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasNoValueAndIsOfDifferentType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasDifferentValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasDifferentValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasNoValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasNoValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TwoInstancesHaveTheSameHashCodeIfTheyBothHaveTheSameValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.TypedEnumerationReturnsInitializationValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledReferenceTypeInstance.WithFilledInstance`1.ValueReturnsInitializationValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithFilledValueTypeInstance" executed="True" result="Success" success="True" time="0.019" asserts="0">
                    <results>
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.DoesNotObjectEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.DoesObjectEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.HasValueReturnsTrue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.ObjectEnumerationReturnsInitializationValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesAreEqualIfTheyBothHaveTheSameValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasDifferentValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasDifferentValueAndIsOfDifferentType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasNoValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesAreNotEqualIfTheOtherHasNoValueAndIsOfDifferentType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasDifferentValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasDifferentValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasNoValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesDoNotHaveTheSameHashCodeIfTheOtherHasNoValueAndIsOfDifferentValueType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TwoInstancesHaveTheSameHashCodeIfTheyBothHaveTheSameValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.TypedEnumerationReturnsInitializationValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.OptionalTests.WithFilledValueTypeInstance.WithFilledInstance`1.ValueReturnsInitializationValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Reactive" executed="True" result="Success" success="True" time="0.053" asserts="0">
                <results>
                  <test-suite type="Namespace" name="ObservableAggregateRootEntityTests" executed="True" result="Success" success="True" time="0.053" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithAnyInstance.ApplyCanBeInterceptedAfterApplication" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithAnyInstance.ApplyCanBeInterceptedBeforeApplication" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithAnyInstance.ApplyEventCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithAnyInstance.InitializeEventsCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithAnyInstance.IsObservableAggregateRootEntity" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithAnyInstance.RegisterHandlerCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithAnyInstance.RegisterHandlerCanOnlyBeCalledOncePerEventType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithChangedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedInstance.InitializeThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithChangedThenClearedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedThenClearedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedThenClearedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedThenClearedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithChangedThenClearedInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithInitializedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithInitializedThenChangedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedInstance.InitializeThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithInitializedThenChangedThenClearedInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInitializedThenChangedThenClearedInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithInstanceWithHandlers" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInstanceWithHandlers.ApplyEventCallsEventHandler" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInstanceWithHandlers.InitializeCallsHandlerForEachEvent" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithInstanceWithoutHandlers" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInstanceWithoutHandlers.ApplyEventDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithInstanceWithoutHandlers.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithPristineInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithPristineInstance.ClearChangesDoesNothing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithPristineInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithPristineInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Reactive.ObservableAggregateRootEntityTests.WithPristineInstance.InitializeDoesNotThrow" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Testing" executed="True" result="Success" success="True" time="0.349" asserts="0">
                <results>
                  <test-suite type="Namespace" name="BatchOfTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FactsTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactsTests.FactsCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactsTests.WhenFactsAreSpecifiedThenReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactsTests.WhenNewEventsAreSpecifiedThenReturnsCombinedExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactsTests.WhenNoFactsAreSpecifiedThenReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FactTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactTests.EventsCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactTests.IdentifierCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactTests.WhenEventsAreSpecifiedThenReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactTests.WhenNewEventsAreSpecifiedThenReturnsCombinedExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.BatchOfTests.FactTests.WhenNoEventsAreSpecifiedThenReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InitialInstanceTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.BatchOfTests.InitialInstanceTests.IsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EventCentricTestSpecificationTests" executed="True" result="Success" success="True" time="0.125" asserts="0">
                    <results>
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.FailReturnsExpectedResult" executed="True" result="Success" success="True" time="0.002" asserts="5" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.FailWithActualEventsReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.FailWithActualExceptionReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.FailWithNullEventsThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.FailWithNullExceptionThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.GivensNullThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.PassReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.ThenNullThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="Theory" name="TwoInstancesAreEqualIfTheyHaveTheSameProperties" executed="True" result="Success" success="True" time="0.013" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesAreNotEqualIfTheirGivensDiffer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesAreNotEqualIfTheirThensDiffer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesAreNotEqualIfTheirWhenDiffers" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveDifferentHashCodeIfTheirGivensDiffer" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirGivensDiffer(System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveDifferentHashCodeIfTheirThensDiffer" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThensDiffer(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="UsingDefaultConstructorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Tuple`2[System.String,System.Object][])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-case name="AggregateSource.Testing.EventCentricTestSpecificationTests.WhenNullThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExceptionCentricTestSpecificationTests" executed="True" result="Success" success="True" time="0.054" asserts="0">
                    <results>
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.DoesEqualItself" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.DoesNotEqualObjectOfOtherType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.FailReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.FailWithActualEventsReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.FailWithActualExceptionReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.FailWithNullEventsThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.FailWithNullExceptionThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.GivensNullThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.PassReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.ThrowsNullThrows" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="Theory" name="TwoInstancesAreEqualIfTheyHaveTheSameProperties" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreEqualIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesAreNotEqualIfTheirGivensDiffer" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirGivensDiffer(System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesAreNotEqualIfTheirThrowsDiffers" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesAreNotEqualIfTheirWhenDiffers" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesAreNotEqualIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveDifferentHashCodeIfTheirGivensDiffer" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirGivensDiffer(System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveDifferentHashCodeIfTheirThrowsDiffers" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirThrowsDiffers(System.Tuple`2[System.String,System.Object][],System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveDifferentHashCodeIfTheirWhenDiffers(System.Tuple`2[System.String,System.Object][],System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="UsingDefaultConstructorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(System.Tuple`2[System.String,System.Object][],System.Object,System.Exception: Message)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-case name="AggregateSource.Testing.ExceptionCentricTestSpecificationTests.WhenNullThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="GivenStateBuilderTests" executed="True" result="Success" success="True" time="0.037" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GivenStateBuilderGivenEventsTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenEventsTests.GivenEventsFixture.GivenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenEventsTests.GivenEventsFixture.GivenReturnsGivenBuilderContinuation" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenEventsTests.GivenEventsFixture.GivenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenEventsTests.GivenEventsFixture.GivenThrowsWhenEventsAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenEventsTests.GivenEventsFixture.GivenThrowsWhenIdentifierIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenEventsTests.GivenEventsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GivenStateBuilderGivenFactsTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenFactsTests.GivenFactsFixture.GivenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenFactsTests.GivenFactsFixture.GivenReturnsGivenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenFactsTests.GivenFactsFixture.GivenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenFactsTests.GivenFactsFixture.GivenThrowsWhenFactsAreNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.GivenStateBuilderGivenFactsTests.GivenFactsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ScenarioGivenEventsTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenEventsTests.GivenEventsFixture.GivenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenEventsTests.GivenEventsFixture.GivenReturnsGivenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenEventsTests.GivenEventsFixture.GivenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenEventsTests.GivenEventsFixture.GivenThrowsWhenEventsAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenEventsTests.GivenEventsFixture.GivenThrowsWhenIdentifierIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenEventsTests.GivenEventsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ScenarioGivenFactsTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenFactsTests.GivenFactsFixture.GivenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenFactsTests.GivenFactsFixture.GivenReturnsGivenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenFactsTests.GivenFactsFixture.GivenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenFactsTests.GivenFactsFixture.GivenThrowsWhenFactsAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.GivenStateBuilderTests.ScenarioGivenFactsTests.GivenFactsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestSpecificationTextWriterTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                    <results>
                      <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.TextWriterCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="WriteEventCentricTestSpecificationResultsInExpectedOutput" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteEventCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.EventCentricTestSpecification,&quot;When\r\n  System.Object\r\nThen\r\n  nothing happened\r\n&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteEventCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.EventCentricTestSpecification,&quot;Given\r\n  System.Object\r\nWhen\r\n  System.Object\r\nThen\r\n  nothing happened\r\n&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteEventCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.EventCentricTestSpecification,&quot;Given\r\n  System.Object,\r\n  System.Object\r\nWhen\r\n  System.Object\r\nThen\r\n  nothing happened\r\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteEventCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.EventCentricTestSpecification,&quot;When\r\n  System.Object\r\nThen\r\n  System.Object\r\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteEventCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.EventCentricTestSpecification,&quot;When\r\n  System.Object\r\nThen\r\n  System.Object,\r\n  System.Object\r\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteEventCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.EventCentricTestSpecification,&quot;Given\r\n  System.Object\r\nWhen\r\n  System.Object\r\nThen\r\n  System.Object\r\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteEventCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.EventCentricTestSpecification,&quot;Given\r\n  System.Object,\r\n  System.Object\r\nWhen\r\n  System.Object\r\nThen\r\n  System.Object,\r\n  System.Object\r\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="WriteExceptionCentricTestSpecificationResultsInExpectedOutput" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteExceptionCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.ExceptionCentricTestSpecification,&quot;Given\r\n  System.Object\r\nWhen\r\n  System.Object\r\nThrows\r\n  [Exception] Message\r\n&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteExceptionCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.ExceptionCentricTestSpecification,&quot;Given\r\n  System.Object,\r\n  System.Object\r\nWhen\r\n  System.Object\r\nThrows\r\n  [Exception] Message\r\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.TestSpecificationTextWriterTests.WriteExceptionCentricTestSpecificationResultsInExpectedOutput(AggregateSource.Testing.ExceptionCentricTestSpecification,&quot;When\r\n  System.Object\r\nThrows\r\n  [Exception] Message\r\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ThenStateBuilderTests" executed="True" result="Success" success="True" time="0.030" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ThenEventsBuilderThenEventsTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenEventsBuilderThenEventsTests.ThenEventsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenEventsBuilderThenEventsTests.ThenEventsFixture.ThenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenEventsBuilderThenEventsTests.ThenEventsFixture.ThenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenEventsBuilderThenEventsTests.ThenEventsFixture.ThenReturnsThenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenEventsBuilderThenEventsTests.ThenEventsFixture.ThenThrowsWhenEventsAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenEventsBuilderThenEventsTests.ThenEventsFixture.ThenThrowsWhenIdentifierIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ThenFactsBuilderThenFactsTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenFactsBuilderThenFactsTests.ThenFactsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenFactsBuilderThenFactsTests.ThenFactsFixture.ThenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenFactsBuilderThenFactsTests.ThenFactsFixture.ThenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenFactsBuilderThenFactsTests.ThenFactsFixture.ThenReturnsThenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.ThenFactsBuilderThenFactsTests.ThenFactsFixture.ThenThrowsWhenFactsAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenBuilderThenEventsTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenEventsTests.ThenEventsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenEventsTests.ThenEventsFixture.ThenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenEventsTests.ThenEventsFixture.ThenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenEventsTests.ThenEventsFixture.ThenReturnsThenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenEventsTests.ThenEventsFixture.ThenThrowsWhenEventsAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenEventsTests.ThenEventsFixture.ThenThrowsWhenIdentifierIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenBuilderThenFactsTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenFactsTests.ThenFactsFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenFactsTests.ThenFactsFixture.ThenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenFactsTests.ThenFactsFixture.ThenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenFactsTests.ThenFactsFixture.ThenReturnsThenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThenStateBuilderTests.WhenBuilderThenFactsTests.ThenFactsFixture.ThenThrowsWhenFactsAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ThrowStateBuilderTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="WhenStateBuilderThrowTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.ThrowStateBuilderTests.WhenStateBuilderThrowTests.ThrowFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThrowStateBuilderTests.WhenStateBuilderThrowTests.ThrowFixture.ThrowDoesNotReturnNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThrowStateBuilderTests.WhenStateBuilderThrowTests.ThrowFixture.ThrowReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.001" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.ThrowStateBuilderTests.WhenStateBuilderThrowTests.ThrowFixture.ThrowReturnsThrowBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.ThrowStateBuilderTests.WhenStateBuilderThrowTests.ThrowFixture.ThrowThrowsWhenExceptionIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="WhenStateBuilderTests" executed="True" result="Success" success="True" time="0.014" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GivenStateBuilderWhenTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.GivenStateBuilderWhenTests.WhenFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.GivenStateBuilderWhenTests.WhenFixture.WhenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.GivenStateBuilderWhenTests.WhenFixture.WhenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.GivenStateBuilderWhenTests.WhenFixture.WhenReturnsWhenBuilderContinuation" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.GivenStateBuilderWhenTests.WhenFixture.WhenThrowsWhenMessageIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ScenarioWhenTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.ScenarioWhenTests.WhenFixture.IsSetInResultingSpecification" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.ScenarioWhenTests.WhenFixture.WhenDoesNotReturnNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.ScenarioWhenTests.WhenFixture.WhenReturnsNewInstanceUponEachCall" executed="True" result="Success" success="True" time="0.000" asserts="1">
                            <properties>
                              <property name="Repeat" value="2" />
                            </properties>
                          </test-case>
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.ScenarioWhenTests.WhenFixture.WhenReturnsWhenBuilderContinuation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.Testing.WhenStateBuilderTests.ScenarioWhenTests.WhenFixture.WhenThrowsWhenMessageIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UnitOfWorkTests" executed="True" result="Success" success="True" time="0.024" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="AggregateSource.UnitOfWorkTests.WithAnyInstance.AttachNullThrows" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithAnyInstance.TryGetIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithAttachedAggregate" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <results>
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedAggregate.AttachDoesNotThrowWithOtherAggregate" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedAggregate.AttachThrowsWithSameAggregate" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedAggregate.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedAggregate.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedAggregate.TryGetReturnsFalseAndNullAsAggregateForUnknownId" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedAggregate.TryGetReturnsTrueAndAggregateForKnownId" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithInstanceWithAttachedChangedAggregates" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedChangedAggregates.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithInstanceWithAttachedChangedAggregates.HasChangesReturnsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithPristineInstance" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="AggregateSource.UnitOfWorkTests.WithPristineInstance.AttachAggregateDoesNotThrow" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithPristineInstance.GetChangesReturnsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithPristineInstance.HasChangesReturnsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="AggregateSource.UnitOfWorkTests.WithPristineInstance.TryGetReturnsFalseAndNullAsAggregate" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\Users\yvesr\Documents\GitHub\AggregateSource\build\output\net45\AggregateSource.GEventStore.Tests.dll" executed="True" result="Success" success="True" time="0.083" asserts="0">
        <results>
          <test-suite type="Namespace" name="AggregateSource" executed="True" result="Success" success="True" time="0.076" asserts="0">
            <results>
              <test-suite type="Namespace" name="GEventStore" executed="True" result="Success" success="True" time="0.076" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="EventReaderConfigurationTests" executed="True" result="Success" success="True" time="0.025" asserts="0">
                    <results>
                      <test-case name="AggregateSource.GEventStore.EventReaderConfigurationTests.DeserializerCannotBeNull" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                      <test-case name="AggregateSource.GEventStore.EventReaderConfigurationTests.StreamNameResolverCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.GEventStore.EventReaderConfigurationTests.StreamUserCredentialsResolverCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="AggregateSource.GEventStore.EventReaderConfigurationTests.UsingConstructorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.005" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Resolvers" executed="True" result="Success" success="True" time="0.014" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixedStreamUserCredentialsResolverTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.Resolvers.FixedStreamUserCredentialsResolverTests.FixedUserCredentialsCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Resolvers.FixedStreamUserCredentialsResolverTests.IsStreamUserCredentialsResolver" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Resolvers.FixedStreamUserCredentialsResolverTests.ResolveIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Resolvers.FixedStreamUserCredentialsResolverTests.ResolveReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NoStreamUserCredentialsResolverTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.Resolvers.NoStreamUserCredentialsResolverTests.IsStreamUserCredentialsResolver" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Resolvers.NoStreamUserCredentialsResolverTests.ResolveIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Resolvers.NoStreamUserCredentialsResolverTests.ResolveReturnsExpectedResult" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PassThroughStreamNameResolverTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.Resolvers.PassThroughStreamNameResolverTests.IsStreamNameResolver" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Resolvers.PassThroughStreamNameResolverTests.ResolveIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Resolvers.PassThroughStreamNameResolverTests.ResolveReturnsExpectedResult" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Snapshots" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SnapshotReaderConfigurationTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderConfigurationTests.DeserializerCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderConfigurationTests.StreamNameResolverCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderConfigurationTests.StreamUserCredentialsResolverCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderConfigurationTests.UsingConstructorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SnapshotTests" executed="True" result="Success" success="True" time="0.024" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.DoesNotEqualNull" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesAreEqualIfTheyHaveTheSameVersionAndState" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesAreEqualIfTheyHaveTheSameVersionAndStateIsNullForBoth" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesAreNotEqualIfTheirStateDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesAreNotEqualIfTheirVersionDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesHaveDifferentHashCodesIfTheirStateDiffers" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesHaveDifferentHashCodesIfTheirVersionDiffers" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameVersionAndState" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.TwoInstancesHaveTheSameHashCodeIfTheyHaveTheSameVersionAndStateIsNullForBoth" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-suite type="ParameterizedTest" name="UsingConstructorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.008" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(int.MinValue,null)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(int.MinValue,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(-1,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(-1,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(0,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(0,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(1,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(1,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(int.MaxValue,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotTests.UsingConstructorReturnsInstanceWithExpectedProperties(int.MaxValue,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\Users\yvesr\Documents\GitHub\AggregateSource\build\output\net45\AggregateSource.GEventStore.Tests.Integrated.dll" executed="True" result="Success" success="True" time="41.142" asserts="0">
        <results>
          <test-suite type="Namespace" name="AggregateSource" executed="True" result="Success" success="True" time="38.109" asserts="0">
            <results>
              <test-suite type="Namespace" name="GEventStore" executed="True" result="Success" success="True" time="38.109" asserts="0">
                <results>
                  <test-suite type="Namespace" name="AsyncRepositoryTests" executed="True" result="Success" success="True" time="4.582" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Construction" executed="True" result="Success" success="True" time="0.024" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.Construction.ConcurrentUnitOfWorkCanNotBeNull" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.Construction.EventReaderConfigurationCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.Construction.EventStoreConnectionCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.Construction.FactoryCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithDeletedStreamInStore" executed="True" result="Success" success="True" time="3.121" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithDeletedStreamInStore.GetAsyncThrowsForKnownId" executed="True" result="Success" success="True" time="1.952" asserts="5" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithDeletedStreamInStore.GetAsyncThrowsForUnknownId" executed="True" result="Success" success="True" time="0.431" asserts="5" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithDeletedStreamInStore.GetOptionalAsyncReturnsEmptyForKnownId" executed="True" result="Success" success="True" time="0.369" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithDeletedStreamInStore.GetOptionalAsyncReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.362" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithEmptyStoreAndEmptyUnitOfWork" executed="True" result="Success" success="True" time="0.353" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.AddAttachesToUnitOfWork" executed="True" result="Success" success="True" time="0.007" asserts="3" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.GetAsyncThrows" executed="True" result="Success" success="True" time="0.022" asserts="5" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.GetOptionalAsyncReturnsEmpty" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithEmptyStoreAndFilledUnitOfWork" executed="True" result="Success" success="True" time="0.211" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetAsyncReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetAsyncThrowsForUnknownId" executed="True" result="Success" success="True" time="0.011" asserts="5" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetOptionalAsyncReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetOptionalAsyncReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithStreamPresentInStore" executed="True" result="Success" success="True" time="0.756" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithStreamPresentInStore.GetAsyncThrowsForUnknownId" executed="True" result="Success" success="True" time="0.147" asserts="5" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithStreamPresentInStore.GetOptionalAsyncReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.249" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithStreamPresentInStore.GetOptionalAsyncReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.221" asserts="2" />
                          <test-case name="AggregateSource.GEventStore.AsyncRepositoryTests.WithStreamPresentInStore.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.133" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="RepositoryTests" executed="True" result="Success" success="True" time="2.732" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Construction" executed="True" result="Success" success="True" time="0.007" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.Construction.EventReaderConfigurationCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.Construction.EventStoreConnectionCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.Construction.FactoryCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.Construction.UnitOfWorkCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.Construction.UsingCtorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithDeletedStreamInStore" executed="True" result="Success" success="True" time="0.964" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithDeletedStreamInStore.GetOptionalReturnsEmptyForKnownDeletedId" executed="True" result="Success" success="True" time="0.255" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithDeletedStreamInStore.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.182" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithDeletedStreamInStore.GetThrowsForKnownDeletedId" executed="True" result="Success" success="True" time="0.382" asserts="3" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithDeletedStreamInStore.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.135" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithEmptyStoreAndEmptyUnitOfWork" executed="True" result="Success" success="True" time="0.301" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.AddAttachesToUnitOfWork" executed="True" result="Success" success="True" time="0.011" asserts="3" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.GetOptionalReturnsEmpty" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.GetThrows" executed="True" result="Success" success="True" time="0.007" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithEmptyStoreAndFilledUnitOfWork" executed="True" result="Success" success="True" time="0.428" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.007" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.007" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithStreamPresentInStore" executed="True" result="Success" success="True" time="0.722" asserts="0">
                        <results>
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithStreamPresentInStore.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.086" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithStreamPresentInStore.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.193" asserts="2" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithStreamPresentInStore.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.141" asserts="1" />
                          <test-case name="AggregateSource.GEventStore.RepositoryTests.WithStreamPresentInStore.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.194" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Snapshots" executed="True" result="Success" success="True" time="30.775" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="AsyncSnapshotableRepositoryTests" executed="True" result="Success" success="True" time="10.878" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Construction" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.Construction.ConcurrentUnitOfWorkCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.Construction.EventReaderConfigurationCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.Construction.EventStoreConnectionCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.Construction.FactoryCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.Construction.SnapshotReaderCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot" executed="True" result="Success" success="True" time="3.245" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.AddAttachesToUnitOfWork" executed="True" result="Success" success="True" time="2.248" asserts="3" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetAsyncReadsSnapshot" executed="True" result="Success" success="True" time="0.052" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetAsyncResolvesStreamName" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetAsyncThrows" executed="True" result="Success" success="True" time="0.014" asserts="5" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetOptionalAsyncReadsSnapshot" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetOptionalAsyncResolvesStreamName" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetOptionalAsyncReturnsEmpty" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot" executed="True" result="Success" success="True" time="1.108" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.AddAttachesToUnitOfWork" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetAsyncReadsSnapshot" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetAsyncResolvesStreamName" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetAsyncThrows" executed="True" result="Success" success="True" time="0.018" asserts="5" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetOptionalAsyncReadsSnapshot" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetOptionalAsyncResolvesStreamName" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetOptionalAsyncReturnsEmpty" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot" executed="True" result="Success" success="True" time="1.996" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetAsyncDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetAsyncDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetAsyncReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.014" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetAsyncThrowsForUnknownId" executed="True" result="Success" success="True" time="0.011" asserts="5" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalAsyncDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalAsyncDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalAsyncReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalAsyncResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalAsyncReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalAsyncReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.012" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndFilledUnitOfWorkAndSnapshot" executed="True" result="Success" success="True" time="1.987" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetAsyncDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetAsyncDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetAsyncReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetAsyncThrowsForUnknownId" executed="True" result="Success" success="True" time="0.013" asserts="5" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalAsyncDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.009" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalAsyncDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalAsyncReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalAsyncResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalAsyncReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.011" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalAsyncReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.010" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithFilledStore" executed="True" result="Success" success="True" time="1.807" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetAsyncReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.133" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetAsyncResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.130" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetAsyncThrowsForUnknownId" executed="True" result="Success" success="True" time="0.129" asserts="5" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetOptionalAsyncReadsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.125" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetOptionalAsyncReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.126" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetOptionalAsyncResolvesNameOfKnownId" executed="True" result="Success" success="True" time="0.123" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetOptionalAsyncResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.144" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetOptionalAsyncReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.128" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetOptionalAsyncReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.123" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetOptionalReturnsRootForKnownIdRestoredFromSnapshot" executed="True" result="Success" success="True" time="0.124" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetReadsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.123" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetResolvesNameOfKnownId" executed="True" result="Success" success="True" time="0.125" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.123" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotableRepositoryTests.WithFilledStore.GetReturnsRootRestoredFromSnapshot" executed="True" result="Success" success="True" time="0.123" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="AsyncSnapshotReaderTests" executed="True" result="Success" success="True" time="0.519" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithAnyInstance.ConfigurationCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithAnyInstance.ConfigurationReturnsExpectedValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithAnyInstance.ConnectionCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithAnyInstance.ConnectionReturnsExpectedValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithAnyInstance.IsAsyncSnapshotReader" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithAnyInstance.ReadIdentifierCannotBeNull" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithDeletedSnapshotStreamInStore" executed="True" result="Success" success="True" time="0.249" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithDeletedSnapshotStreamInStore.GetReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.127" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithDeletedSnapshotStreamInStore.GetReturnsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.120" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptySnapshotStreamInStore" executed="True" result="Success" success="True" time="0.118" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithEmptySnapshotStreamInStore.GetReturnsEmptyForKnownId" executed="True" result="Success" success="True" time="0.057" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithEmptySnapshotStreamInStore.GetReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.058" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithSnapshotStreamFoundInStore" executed="True" result="Success" success="True" time="0.126" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithSnapshotStreamFoundInStore.GetReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.061" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithSnapshotStreamFoundInStore.GetReturnsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.061" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithSnapshotStreamNotFoundInStore" executed="True" result="Success" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.AsyncSnapshotReaderTests.WithSnapshotStreamNotFoundInStore.GetReturnsEmptyForKnownId" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SnapshotableRepositoryTests" executed="True" result="Success" success="True" time="18.805" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Construction" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.Construction.EventReaderConfigurationCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.Construction.EventStoreConnectionCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.Construction.FactoryCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.Construction.SnapshotReaderCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.Construction.UnitOfWorkCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot" executed="True" result="Success" success="True" time="2.905" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.AddAttachesToUnitOfWork" executed="True" result="Success" success="True" time="1.047" asserts="3" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetOptionalReadsSnapshot" executed="True" result="Success" success="True" time="0.028" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetOptionalResolvesStreamName" executed="True" result="Success" success="True" time="0.023" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetOptionalReturnsEmpty" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetReadsSnapshot" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetResolvesStreamName" executed="True" result="Success" success="True" time="0.026" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndNoSnapshot.GetThrows" executed="True" result="Success" success="True" time="0.018" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot" executed="True" result="Success" success="True" time="2.260" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.AddAttachesToUnitOfWork" executed="True" result="Success" success="True" time="0.025" asserts="3" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetOptionalReadsSnapshot" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetOptionalResolvesStreamName" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetOptionalReturnsEmpty" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetReadsSnapshot" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetResolvesStreamName" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndEmptyUnitOfWorkAndSnapshot.GetThrows" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot" executed="True" result="Success" success="True" time="4.073" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.025" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.027" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.030" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.015" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndNoSnapshot.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.019" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptyStoreAndFilledUnitOfWorkAndSnapshot" executed="True" result="Success" success="True" time="4.894" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.026" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalDoesNotReadSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.027" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalDoesNotResolveNameOfKnownId" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.026" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetOptionalReturnsRootForKnownIdNotRestoredFromSnapshot" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.022" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.017" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetReturnsRootOfKnownIdNotRestoredFromSnapshot" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithEmptyStoreAndFilledUnitOfWorkAndSnapshot.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithFilledStoreAndNoSnapshot" executed="True" result="Success" success="True" time="1.258" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetOptionalReadsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.100" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetOptionalReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.063" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetOptionalResolvesNameOfKnownId" executed="True" result="Success" success="True" time="0.082" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetOptionalResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.103" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.105" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.080" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetReadsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.057" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.069" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetResolvesNameOfKnownId" executed="True" result="Success" success="True" time="0.084" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.225" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.063" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndNoSnapshot.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.065" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithFilledStoreAndSnapshot" executed="True" result="Success" success="True" time="1.932" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetOptionalReadsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.128" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetOptionalReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.118" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetOptionalResolvesNameOfKnownId" executed="True" result="Success" success="True" time="0.125" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetOptionalResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.130" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.124" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.122" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetOptionalReturnsRootForKnownIdRestoredFromSnapshot" executed="True" result="Success" success="True" time="0.124" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetReadsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.120" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetReadsSnapshotOfUnknownId" executed="True" result="Success" success="True" time="0.124" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetResolvesNameOfKnownId" executed="True" result="Success" success="True" time="0.129" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetResolvesNameOfUnknownId" executed="True" result="Success" success="True" time="0.125" asserts="0" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.129" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetReturnsRootRestoredFromSnapshot" executed="True" result="Success" success="True" time="0.251" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotableRepositoryTests.WithFilledStoreAndSnapshot.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.159" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SnapshotReaderTests" executed="True" result="Success" success="True" time="0.533" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="WithAnyInstance" executed="True" result="Success" success="True" time="0.007" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithAnyInstance.ConfigurationCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithAnyInstance.ConfigurationReturnsExpectedValue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithAnyInstance.ConnectionCannotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithAnyInstance.ConnectionReturnsExpectedValue" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithAnyInstance.IsSnapshotReader" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithAnyInstance.ReadIdentifierCannotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithDeletedSnapshotStreamInStore" executed="True" result="Success" success="True" time="0.263" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithDeletedSnapshotStreamInStore.GetReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.136" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithDeletedSnapshotStreamInStore.GetReturnsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.123" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithEmptySnapshotStreamInStore" executed="True" result="Success" success="True" time="0.127" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithEmptySnapshotStreamInStore.GetReturnsEmptyForKnownId" executed="True" result="Success" success="True" time="0.061" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithEmptySnapshotStreamInStore.GetReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.062" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithSnapshotStreamFoundInStore" executed="True" result="Success" success="True" time="0.119" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithSnapshotStreamFoundInStore.GetReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.055" asserts="1" />
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithSnapshotStreamFoundInStore.GetReturnsSnapshotOfKnownId" executed="True" result="Success" success="True" time="0.059" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithSnapshotStreamNotFoundInStore" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="AggregateSource.GEventStore.Snapshots.SnapshotReaderTests.WithSnapshotStreamNotFoundInStore.GetReturnsEmptyForKnownId" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\Users\yvesr\Documents\GitHub\AggregateSource\build\output\net45\SampleSource.dll" executed="True" result="Success" success="True" time="0.136" asserts="0">
        <results>
          <test-suite type="Namespace" name="SampleSource" executed="True" result="Success" success="True" time="0.130" asserts="0">
            <results>
              <test-suite type="Namespace" name="Testing" executed="True" result="Success" success="True" time="0.103" asserts="0">
                <results>
                  <test-suite type="Namespace" name="AggregateAsSystemUnderTest" executed="True" result="Success" success="True" time="0.090" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleUsage" executed="True" result="Success" success="True" time="0.089" asserts="0">
                        <results>
                          <test-case name="SampleSource.Testing.AggregateAsSystemUnderTest.SampleUsage.CancelledConcertCanNotBeCancelled" executed="True" result="Success" success="True" time="0.061" asserts="2" />
                          <test-case name="SampleSource.Testing.AggregateAsSystemUnderTest.SampleUsage.CancelledConcertCanNotStartTicketSale" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                          <test-case name="SampleSource.Testing.AggregateAsSystemUnderTest.SampleUsage.PlannedConcertCanBeCancelled" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="SampleSource.Testing.AggregateAsSystemUnderTest.SampleUsage.PlannedConcertCanHaveTicketSaleStarted" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                          <test-case name="SampleSource.Testing.AggregateAsSystemUnderTest.SampleUsage.TicketSaleGetAvailabilityReturnsExpectedSeatCount" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                          <test-case name="SampleSource.Testing.AggregateAsSystemUnderTest.SampleUsage.TicketSaleGetAvailabilityThrowsWhenSaleHasEnded" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="UsingIdFromIEvent" executed="True" result="Success" success="True" time="0.010" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TodoListTesting" executed="True" result="Success" success="True" time="0.009" asserts="0">
                        <results>
                          <test-case name="SampleSource.Testing.UsingIdFromIEvent.TodoListTesting.when_adding_a_new_list" executed="True" result="Success" success="True" time="0.009" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UsingDomainEvents" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SampleUsage" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="SampleSource.UsingDomainEvents.SampleUsage.Test" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UsingEntities" executed="True" result="Success" success="True" time="0.007" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SampleUsage" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="SampleSource.UsingEntities.SampleUsage.Encapsulated_TodoListItem_Behavior_Changes_Are_Tracked" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                      <test-case name="SampleSource.UsingEntities.SampleUsage.Exposed_TodoListItem_Behavior_Changes_Are_Tracked" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UsingObjectInheritance" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SampleUsage" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="SampleSource.UsingObjectInheritance.SampleUsage.Renting_a_video_tape_emits_a_recent_enough_video_title" executed="True" result="Success" success="True" time="0.004" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\Users\yvesr\Documents\GitHub\AggregateSource\build\output\net45\StreamSource.Tests.dll" executed="True" result="Success" success="True" time="0.186" asserts="0">
        <results>
          <test-suite type="Namespace" name="StreamSource" executed="True" result="Success" success="True" time="0.180" asserts="0">
            <results>
              <test-suite type="TestFixture" name="EventStreamTests" executed="True" result="Success" success="True" time="0.033" asserts="0">
                <results>
                  <test-case name="StreamSource.EventStreamTests.EventsCanNotBeNull" executed="True" result="Success" success="True" time="0.009" asserts="1" />
                  <test-suite type="Theory" name="UsingDefaultConstructorReturnsInstanceWithExpectedProperties" executed="True" result="Success" success="True" time="0.020" asserts="0">
                    <results>
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(int.MinValue,System.Object[])" executed="True" result="Success" success="True" time="0.005" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(int.MinValue,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(int.MinValue,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(-1,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(-1,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(-1,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(0,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(0,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(0,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(1,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(1,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(1,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(int.MaxValue,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(int.MaxValue,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="StreamSource.EventStreamTests.UsingDefaultConstructorReturnsInstanceWithExpectedProperties(int.MaxValue,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ExpectedVersionTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="StreamSource.ExpectedVersionTests.ExpectedVersionNoneIsMinus1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="OptimisticCausationExceptionTests" executed="True" result="Success" success="True" time="0.010" asserts="0">
                <results>
                  <test-case name="StreamSource.OptimisticCausationExceptionTests.CanBeSerialized" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                  <test-case name="StreamSource.OptimisticCausationExceptionTests.IsStreamSourceException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StreamSource.OptimisticCausationExceptionTests.UsingConstructorWithCausationIdAndMessageAndInnerExceptionReturnsExceptionWithExcpectedProperties" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                  <test-case name="StreamSource.OptimisticCausationExceptionTests.UsingConstructorWithCausationIdAndMessageReturnsExceptionWithExcpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="StreamSource.OptimisticCausationExceptionTests.UsingConstructorWithCausationIdReturnsExceptionWithExcpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="OptimisticConcurrencyExceptionTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                <results>
                  <test-case name="StreamSource.OptimisticConcurrencyExceptionTests.CanBeSerialized" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                  <test-case name="StreamSource.OptimisticConcurrencyExceptionTests.IsStreamSourceException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="StreamSource.OptimisticConcurrencyExceptionTests.UsingConstructorWithStreamIdAndExpectedVersionAndMessageAndInnerExceptionReturnsExceptionWithExcpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="StreamSource.OptimisticConcurrencyExceptionTests.UsingConstructorWithStreamIdAndExpectedVersionAndMessageReturnsExceptionWithExcpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="StreamSource.OptimisticConcurrencyExceptionTests.UsingConstructorWithStreamIdAndExpectedVersionReturnsExceptionWithExcpectedProperties" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="RepositoryTests" executed="True" result="Success" success="True" time="0.092" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AnyInstance" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="StreamSource.RepositoryTests.AnyInstance.AddIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.AnyInstance.GetIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.AnyInstance.GetOptionalIdentifierCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Construction" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <results>
                      <test-case name="StreamSource.RepositoryTests.Construction.EventStreamReaderCanNotBeNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.Construction.FactoryCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.Construction.UnitOfWorkCanNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithEmptyStoreAndEmptyUnitOfWork" executed="True" result="Success" success="True" time="0.058" asserts="0">
                    <results>
                      <test-case name="StreamSource.RepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.AddAttachesToUnitOfWork" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="StreamSource.RepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.GetOptionalReturnsEmpty" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.WithEmptyStoreAndEmptyUnitOfWork.GetThrows" executed="True" result="Success" success="True" time="0.053" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithEmptyStoreAndFilledUnitOfWork" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="StreamSource.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.WithEmptyStoreAndFilledUnitOfWork.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WithFilledStore" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="StreamSource.RepositoryTests.WithFilledStore.GetOptionalReturnsEmptyForUnknownId" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.WithFilledStore.GetOptionalReturnsRootForKnownId" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.WithFilledStore.GetReturnsRootOfKnownId" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="StreamSource.RepositoryTests.WithFilledStore.GetThrowsForUnknownId" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SampleUsage" executed="True" result="Success" success="True" time="0.011" asserts="0">
                <results>
                  <test-case name="StreamSource.SampleUsage.Show" executed="True" result="Success" success="True" time="0.011" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="StreamSourceExceptionTests" executed="True" result="Success" success="True" time="0.006" asserts="0">
                <results>
                  <test-case name="StreamSource.StreamSourceExceptionTests.CanBeSerialized" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="StreamSource.StreamSourceExceptionTests.IsAnException" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="StreamSource.StreamSourceExceptionTests.UsingTheConstructorWithMessageAndInnerExceptionReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="StreamSource.StreamSourceExceptionTests.UsingTheConstructorWithMessageReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="StreamSource.StreamSourceExceptionTests.UsingTheDefaultConstructorReturnsExceptionWithExpectedProperties" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Assembly" name="C:\Users\yvesr\Documents\GitHub\AggregateSource\build\output\net45\StreamSource.FirebirdClient.Tests.dll" executed="True" result="Inconclusive" success="False" time="0.008" asserts="0" />
    </results>
  </test-suite>
</test-results>